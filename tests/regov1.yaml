cases:
- note: regov1/keywords/if
  modules:
  - |
    package test
    import rego.v1

    p if {
      true
    }
  query: data.test.p=x
  want_result:
    - x: true
- note: regov1/keywords/contains
  modules:
  - |
    package test
    import rego.v1

    p contains 1 if {
      true
    }
  query: data.test.p=x
  want_result:
    - x: [1]
- note: regov1/keywords/every
  modules:
  - |
    package test
    import rego.v1

    p if {
      every i in [1, 3, 5]{
        i % 2 == 1
      }
    }
  query: data.test.p=x
  want_result:
    - x: true
- note: regov1/keywords/in
  modules:
  - |
    package test
    import rego.v1

    p if {
      1 in [1, 2, 3]
    }
  query: data.test.p=x
  want_result:
    - x: true
- note: regov1/keywords/conflicting import
  modules:
  - |
    package test
    import rego.v1
    import future.keywords

    p if {
      true
    }
  query: data.test.p=x
  want_error_code: rego_parse_error
  want_error: the `rego.v1` import implies `future.keywords`, these are therefore mutually exclusive
- note: regov1/conflicting imports
  modules:
  - |
    package a

    b := 1
  - |
    package c

    b := 2
  - |
    package test

    import rego.v1
    import data.a
    import data.c as a

    p if {
      a.b == 2
    }
  query: data.test.p=x
  want_error: import must not shadow import data.a
  want_error_code: rego_compile_error
- note: regov1/reserved/input
  modules:
  - |
    package test

    import rego.v1

    p := input if {
      input := 3
    }
  query: data.test.p=x
  want_error: variables must not shadow input (use a different variable name)
  want_error_code: rego_compile_error
- note: regov1/reserved/data
  modules:
  - |
    package test

    import rego.v1

    p := data if {
      data := 3
    }
  query: data.test.p=x
  want_error: variables must not shadow data (use a different variable name)
  want_error_code: rego_compile_error
- note: regov1/deprecated/all
  modules:
  - |
    package test

    import rego.v1

    p if {
      all([true, true])
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: all"
  want_error_code: rego_type_error
- note: regov1/deprecated/any
  modules:
  - |
    package test

    import rego.v1

    p if {
      any([false, true])
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: any"
  want_error_code: rego_type_error
- note: regov1/deprecated/re_match
  modules:
  - |
    package test

    import rego.v1

    p if {
      re_match("f.*", "foo")
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: re_match"
  want_error_code: rego_type_error
- note: regov1/deprecated/set_diff
  modules:
  - |
    package test

    import rego.v1

    p := b if {
      b := set_diff({1, 2, 3}, {1})
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: set_diff"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_array
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_array([1, 2, 3])
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_array"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_set
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_set({1, 2, 3})
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_set"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_string
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_string("foo")
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_string"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_boolean
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_boolean(true)
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_boolean"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_null
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_null(null)
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_null"
  want_error_code: rego_type_error
- note: regov1/deprecated/cast_object
  modules:
  - |
    package test

    import rego.v1

    p := a if {
      b := cast_object({"a": 5})
    }
  query: data.test.p=x
  want_error: "deprecated built-in function calls in expression: cast_object"
  want_error_code: rego_type_error
- note: regov1/deprecated/module specific
  modules:
  - |
    package a

    p := b {
      b := cast_object({"a": 5})
    }
  - |
    package test

    import rego.v1

    p := data.a.p
    r := "foo"
  query: data.test.p=x
  want_result:
  - x:
      a: 5
- note: regov1/required/comp_if
  modules:
  - |
    package test

    import rego.v1

    p := a {
      a := 2
    }
  query: data.test.p=x
  want_error: "`if` keyword is required before rule body"
  want_error_code: rego_parse_error
- note: regov1/required/func_if
  modules:
  - |
    package test

    import rego.v1

    p(x) := a {
      a := x * 2
    }
  query: data.test.p(2)=x
  want_error: "`if` keyword is required before rule body"
  want_error_code: rego_parse_error
- note: regov1/required/obj_if
  modules:
  - |
    package test

    import rego.v1

    p[2] := 1 {
      true
    } 
  query: data.test.p=x
  want_error: "`if` keyword is required before rule body"
  want_error_code: rego_parse_error
- note: regov1/required/set_if
  modules:
  - |
    package test

    import rego.v1

    p contains 2 {
      true
    }
  query: data.test.p=x
  want_error: "`if` keyword is required before rule body"
  want_error_code: rego_parse_error
