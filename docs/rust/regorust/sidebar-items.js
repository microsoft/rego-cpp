window.SIDEBAR_ITEMS = {"constant":[["REGOCPP_BUILD_DATE",""],["REGOCPP_BUILD_NAME",""],["REGOCPP_BUILD_TOOLCHAIN",""],["REGOCPP_GIT_HASH",""],["REGOCPP_OPA_VERSION",""],["REGOCPP_PLATFORM",""],["REGOCPP_VERSION",""],["REGOCPP_VERSION_MAJOR",""],["REGOCPP_VERSION_MINOR",""],["REGOCPP_VERSION_REVISION",""],["REGO_ERROR",""],["REGO_ERROR_BUFFER_TOO_SMALL",""],["REGO_LOG_LEVEL_DEBUG",""],["REGO_LOG_LEVEL_ERROR",""],["REGO_LOG_LEVEL_INFO",""],["REGO_LOG_LEVEL_NONE",""],["REGO_LOG_LEVEL_TRACE",""],["REGO_LOG_LEVEL_WARN",""],["REGO_NODE_ARRAY",""],["REGO_NODE_BINDING",""],["REGO_NODE_ERROR",""],["REGO_NODE_ERROR_AST",""],["REGO_NODE_ERROR_CODE",""],["REGO_NODE_ERROR_MESSAGE",""],["REGO_NODE_ERROR_SEQ",""],["REGO_NODE_FALSE",""],["REGO_NODE_FLOAT",""],["REGO_NODE_INT",""],["REGO_NODE_INTERNAL",""],["REGO_NODE_NULL",""],["REGO_NODE_OBJECT",""],["REGO_NODE_OBJECT_ITEM",""],["REGO_NODE_SCALAR",""],["REGO_NODE_SET",""],["REGO_NODE_STRING",""],["REGO_NODE_TERM",""],["REGO_NODE_TRUE",""],["REGO_NODE_UNDEFINED",""],["REGO_NODE_VAR",""],["REGO_OK",""]],"enum":[["LogLevel",""],["NodeKind","Enumeration of different kinds of Rego Nodes that can be returned as output from a query."],["NodeValue","Represents the value of a Rego Node."]],"fn":[["regoAddDataJSON","Adds a base document from the specified string."],["regoAddDataJSONFile","Adds a base document from the file at the specified path."],["regoAddModule","Adds a module (e.g. virtual document) from the specified string."],["regoAddModuleFile","Adds a module (e.g. virtual document) from the file at the specified path."],["regoFree","Frees a Rego interpreter."],["regoFreeOutput","Frees a Rego output."],["regoGetDebugEnabled","Gets the debug mode of the interpreter."],["regoGetError","Returns the most recently thrown error."],["regoGetStrictBuiltInErrors","Gets whether strict built-in errors are enabled."],["regoGetWellFormedChecksEnabled","Gets whether well-formed checks are enabled."],["regoNew","Allocates and initializes a new Rego interpreter."],["regoNodeGet","Returns the child node at the specified index."],["regoNodeJSON","Populate a buffer with the JSON representation of the node."],["regoNodeJSONSize","Returns the number of bytes needed to store a 0-terminated string representing the JSON representation of the node."],["regoNodeSize","Returns the number of children of the node."],["regoNodeType","Returns an enumeration value indicating the nodes type."],["regoNodeTypeName","Returns the name of the node type as a human-readable string."],["regoNodeValue","Populate a buffer with the node value."],["regoNodeValueSize","Returns the number of bytes needed to store a 0-terminated string representing the text value of the node."],["regoOutputBinding","Returns the bound value for a given variable name."],["regoOutputNode","Returns the node containing the output of the query."],["regoOutputOk","Returns whether the output is ok."],["regoOutputString","Returns the output represented as a human-readable string."],["regoQuery","Performs a query against the current base and virtual documents."],["regoSetDebugEnabled","Sets the debug mode of the interpreter."],["regoSetDebugPath","Sets the path to the debug directory."],["regoSetInputJSON","Sets the current input document from the specified string."],["regoSetInputJSONFile","Sets the current input document from the file at the specified path."],["regoSetLogLevel","Sets the level of logging."],["regoSetStrictBuiltInErrors","Sets whether the built-ins should throw errors."],["regoSetWellFormedChecksEnabled","Sets whether to perform well-formed checks after each compiler pass."],["set_log_level","Sets the level of logging produced by the library."]],"struct":[["Interpreter","Interface for the Rego interpreter."],["Node","Interface for Rego Node objects."],["Output","Interface for the Rego output."]],"type":[["regoBoolean",""],["regoEnum",""],["regoInterpreter",""],["regoNode",""],["regoOutput",""],["regoSize",""]]};