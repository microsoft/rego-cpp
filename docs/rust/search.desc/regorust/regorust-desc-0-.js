searchState.loadedDescShard("regorust", 0, "Representation of a compiled Rego bundle. This can be …\nFormat types for serializing bundles.\nThe Input interface allows the creation of inputs to a …\nInterface for the Rego interpreter.\nInterface for Rego Node objects.\nEnumeration of different kinds of Rego Nodes that can be …\nRepresents the value of a Rego Node.\nInterface for the Rego output.\nAdds a base document from a string.\nAdds a base document from a file.\nAdds a Rego module from a string.\nAdds a Rego module from a file.\nTake the top <code>size</code> values on the stack and turn them into …\nReturns the raw child node at a particular index.\nAttempts to return the binding for the given variable name.\nAttempts to return the binding for the given variable name.\nPush a boolean onto the stack.\nBuild a bundle from the current base and virtual …\nReturns the build information as a string.\nAttempts to return the expressions at a given result index.\nAttempts to return the expressions at a given result index.\nPush a float onto the stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether the Rego interpreter is in debug mode.\nSets the level of logging produced by the library.\nReturns whether the interpreter will forward errors thrown …\nReturns whether the Rego interpreter will perform …\nLooks up an index in an array.\nPush an integer onto the stack.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the interpreter has a built-in with the …\nReturns an iterator over the child nodes.\nReturns the node as a JSON string.\nThe kind of this node.\nReturns a human-readable string representation of the node …\nLoads a bundle from the disk.\nLooks up a key in an object or a set.\nCreates a new Rego interpreter.\nPush a null onto the stack.\nTake the top <code>size</code> values on the stack and turn them into …\nTake the top two values on the stack and turn them into an …\nReturns whether the output is ok.\nThis method performs a query against the current set of …\nPerforms a query using the compiled policy in the bundle.\nPerforms a query using the compiled policy in the bundle.\n@brief Adds a base document from the specified string. …\n@brief Adds a base document from the file at the specified …\n@brief Adds an entrypoint to the interpreter. @details By …\n@brief Adds a module (e.g. virtual document) from the …\n@brief Adds a module (e.g. virtual document) from the file …\n@brief Boolean type\n@brief Builds a compiled Rego bundle. @details The bundle …\n@brief Populate a buffer with a string of the form “…\n@brief Returns the number of bytes needed to store a …\n@brief Opaque bundle type\n@brief Loads a compiled Rego bundle from the specified …\n@brief Loads a compiled Rego bundle from the specified …\n@brief Returns a node containing the base document of the …\n@brief Returns whether the bundle is ok. @details If the …\n@brief Performs a query against the specified bundle. …\n@brief Performs a query against the specified bundle at …\n@brief Saves a compiled Rego bundle to the specified …\n@brief Saves a compiled Rego bundle to the specified …\n@brief Enum type\n@brief Populate a buffer with the most recent error …\n@brief Returns the number of bytes needed to store a …\n@brief Frees a Rego interpreter. @note This pointer must …\n@brief Frees a Rego bundle. @note This pointer must have …\n@brief Frees a Rego Input object. @note This pointer must …\n@brief Frees a Rego output. @note This pointer must have …\n@brief Gets the level of logging on the interpreter. …\n@brief Gets whether strict built-in errors are enabled. …\n@brief Gets whether well-formedness checks are enabled. …\n@brief Opaque input type\n@brief Uses the top ‘count’ values on the stack to …\n@brief Adds a boolean value to the input object. @param …\n@brief Adds a floating point value to the input object. …\n@brief Adds an integer value to the input object. @param …\n@brief Returns the top of the Input stack. @param input …\n@brief Adds a null value to the input object. @param input …\n@brief Uses the top ‘count’ values on the stack to …\n@brief Uses the top two values on the stack to create an …\n@brief Uses the top ‘count’ values on the stack to …\n@brief Returns the number of items on the Input stack. …\n@brief Adds a string value to the input object. @param …\n@brief Validates the input object. @details This function …\n@brief Integer type\n@brief Opaque interpreter type\n@brief Returns whether the specified name corresponds to …\n@brief Gets a log level constant value from a string …\n@brief Allocates and initializes a new Rego interpreter. …\n@brief Allocates and initializes a new Rego Input object. …\n@brief Opaque node type\n@brief Returns the child node at the specified index. …\n@brief Populate a buffer with the JSON representation of …\n@brief Returns the number of bytes needed to store a …\n@brief Returns the number of children of the node. @param …\n@brief Returns an enumeration value indicating the node’…\n@brief Returns the name of the node type as a …\n@brief Returns the number of bytes needed to store a …\n@brief Populate a buffer with the node value. @details The …\n@brief Returns the number of bytes needed to store a …\n@brief Opaque output type\n@brief Returns the bound value for a given variable name …\n@brief Returns the bound value for a given variable name. …\n@brief Returns a node containing a list of terms resulting …\n@brief Returns a node containing a list of terms resulting …\n@brief Populate a buffer with the output represented as a …\n@brief Returns the number of bytes needed to store a …\n@brief Returns the node containing the output of the query.\n@brief Returns whether the output is ok. @details If the …\n@brief Returns the number of results in the output. …\n@brief Performs a query against the current base and …\n@brief Sets the debug mode of the interpreter. @details …\n@brief Sets the path to the debug directory. @details If …\n@brief Sets the default level of logging. @details This …\n@brief Sets the current input document from the specified …\n@brief Sets the current input document from the file at …\n@brief Sets the current input document from the specified …\n@brief Sets the level of logging on the interpreter. …\n@brief Sets the query for the interpreter. @details By …\n@brief Sets whether the built-ins should throw errors. …\n@brief Sets whether to perform well-formedness checks …\n@brief Size type\n@brief Node Type type\n@brief Populate a buffer with a string representing the …\n@brief Returns the number of bytes needed to store a …\nSaves a bundle to the disk.\nTake the top <code>size</code> values on the stack and turn them into a …\nSets whether the Rego interpreter is in debug mode.\nSets the path to the directory where the Rego interpreter …\nSets the input for the current policy directly.\nSets the input JSON expression from a string.\nSets the input JSON expression from a file.\nSets the level of logging produced by the library.\nSets whether the interpreter will forward errors thrown by …\nSets whether the Rego interpreter will perform …\nReturns the number of results in the output.\nReturns the number of child nodes.\nThe number of children of this node.\nPush a string onto the stack.\nReturns the output node.\nReturns the output as a JSON-encoded string.\nReturns the value of the node.")